{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/assets/mtlloader.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","MTLLoader","manager","this","undefined","DefaultLoadingManager","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","length","line","trim","charAt","pos","indexOf","substring","toLowerCase","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","getIndex","materialName","getAsArray","index","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","color","Color","fromArray","specular","shininess","opacity","transparent","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","TextureLoader"],"mappings":"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","file":"./js/mtlloader.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n *\r\n * @author angelxuanchang\r\n */\r\n\r\nTHREE.MTLLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.MTLLoader.prototype = {\r\n\r\n\tconstructor: THREE.MTLLoader,\r\n\r\n\t/**\r\n\t * Loads and parses a MTL asset from a URL.\r\n\t *\r\n\t * @param {String} url - URL to the MTL file.\r\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n\t * @param {Function} [onProgress] - Callback for download progress.\r\n\t * @param {Function} [onError] - Callback for download errors.\r\n\t *\r\n\t * @see setPath setTexturePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setPath and/or setTexturePath explicitly prior to load.\r\n\t */\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Set base path for resolving references.\r\n\t * If set this path will be prepended to each loaded and found reference.\r\n\t *\r\n\t * @see setTexturePath\r\n\t * @param {String} path\r\n\t *\r\n\t * @example\r\n\t *     mtlLoader.setPath( 'assets/obj/' );\r\n\t *     mtlLoader.load( 'my.mtl', ... );\r\n\t */\r\n\tsetPath: function ( path ) {\r\n\r\n\t\tthis.path = path;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Set base path for resolving texture references.\r\n\t * If set this path will be prepended found texture reference.\r\n\t * If not set and setPath is, it will be used as texture base path.\r\n\t *\r\n\t * @see setPath\r\n\t * @param {String} path\r\n\t *\r\n\t * @example\r\n\t *     mtlLoader.setPath( 'assets/obj/' );\r\n\t *     mtlLoader.setTexturePath( 'assets/textures/' );\r\n\t *     mtlLoader.load( 'my.mtl', ... );\r\n\t */\r\n\tsetTexturePath: function ( path ) {\r\n\r\n\t\tthis.texturePath = path;\r\n\r\n\t},\r\n\r\n\tsetBaseUrl: function ( path ) {\r\n\r\n\t\tconsole.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\r\n\r\n\t\tthis.setTexturePath( path );\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetMaterialOptions: function ( value ) {\r\n\r\n\t\tthis.materialOptions = value;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Parses a MTL file.\r\n\t *\r\n\t * @param {String} text - Content of MTL file\r\n\t * @return {THREE.MTLLoader.MaterialCreator}\r\n\t *\r\n\t * @see setPath setTexturePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setPath and/or setTexturePath explicitly prior to parse.\r\n\t */\r\n\tparse: function ( text ) {\r\n\r\n\t\tvar lines = text.split( '\\n' );\r\n\t\tvar info = {};\r\n\t\tvar delimiter_pattern = /\\s+/;\r\n\t\tvar materialsInfo = {};\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tvar line = lines[ i ];\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\r\n\r\n\t\t\t\t// Blank line or comment ignore\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar pos = line.indexOf( ' ' );\r\n\r\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\r\n\t\t\tkey = key.toLowerCase();\r\n\r\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\r\n\t\t\tvalue = value.trim();\r\n\r\n\t\t\tif ( key === 'newmtl' ) {\r\n\r\n\t\t\t\t// New material\r\n\r\n\t\t\t\tinfo = { name: value };\r\n\t\t\t\tmaterialsInfo[ value ] = info;\r\n\r\n\t\t\t} else if ( info ) {\r\n\r\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' ) {\r\n\r\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\r\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinfo[ key ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\r\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\r\n\t\tmaterialCreator.setManager( this.manager );\r\n\t\tmaterialCreator.setMaterials( materialsInfo );\r\n\t\treturn materialCreator;\r\n\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Create a new THREE-MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\r\n\r\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\r\n\r\n\tthis.baseUrl = baseUrl || '';\r\n\tthis.options = options;\r\n\tthis.materialsInfo = {};\r\n\tthis.materials = {};\r\n\tthis.materialsArray = [];\r\n\tthis.nameLookup = {};\r\n\r\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\r\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\r\n\r\n};\r\n\r\nTHREE.MTLLoader.MaterialCreator.prototype = {\r\n\r\n\tconstructor: THREE.MTLLoader.MaterialCreator,\r\n\r\n\tcrossOrigin: 'Anonymous',\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetManager: function ( value ) {\r\n\r\n\t\tthis.manager = value;\r\n\r\n\t},\r\n\r\n\tsetMaterials: function ( materialsInfo ) {\r\n\r\n\t\tthis.materialsInfo = this.convert( materialsInfo );\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t},\r\n\r\n\tconvert: function ( materialsInfo ) {\r\n\r\n\t\tif ( ! this.options ) return materialsInfo;\r\n\r\n\t\tvar converted = {};\r\n\r\n\t\tfor ( var mn in materialsInfo ) {\r\n\r\n\t\t\t// Convert materials info into normalized form based on options\r\n\r\n\t\t\tvar mat = materialsInfo[ mn ];\r\n\r\n\t\t\tvar covmat = {};\r\n\r\n\t\t\tconverted[ mn ] = covmat;\r\n\r\n\t\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\t\tvar save = true;\r\n\t\t\t\tvar value = mat[ prop ];\r\n\t\t\t\tvar lprop = prop.toLowerCase();\r\n\r\n\t\t\t\tswitch ( lprop ) {\r\n\r\n\t\t\t\t\tcase 'kd':\r\n\t\t\t\t\tcase 'ka':\r\n\t\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\r\n\r\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\r\n\r\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// ignore\r\n\r\n\t\t\t\t\t\t\t\tsave = false;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( save ) {\r\n\r\n\t\t\t\t\tcovmat[ lprop ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn converted;\r\n\r\n\t},\r\n\r\n\tpreload: function () {\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.create( mn );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetIndex: function ( materialName ) {\r\n\r\n\t\treturn this.nameLookup[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetAsArray: function () {\r\n\r\n\t\tvar index = 0;\r\n\r\n\t\tfor ( var mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\r\n\t\t\tthis.nameLookup[ mn ] = index;\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materialsArray;\r\n\r\n\t},\r\n\r\n\tcreate: function ( materialName ) {\r\n\r\n\t\tif ( this.materials[ materialName ] === undefined ) {\r\n\r\n\t\t\tthis.createMaterial_( materialName );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tcreateMaterial_: function ( materialName ) {\r\n\r\n\t\t// Create material\r\n\r\n\t\tvar scope = this;\r\n\t\tvar mat = this.materialsInfo[ materialName ];\r\n\t\tvar params = {\r\n\r\n\t\t\tname: materialName,\r\n\t\t\tside: this.side\r\n\r\n\t\t};\r\n\r\n\t\tfunction resolveURL( baseUrl, url ) {\r\n\r\n\t\t\tif ( typeof url !== 'string' || url === '' )\r\n\t\t\t\treturn '';\r\n\r\n\t\t\t// Absolute URL\r\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t\treturn baseUrl + url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMapForType( mapType, value ) {\r\n\r\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\r\n\r\n\t\t\tvar texParams = scope.getTextureParams( value, params );\r\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\r\n\r\n\t\t\tmap.repeat.copy( texParams.scale );\r\n\t\t\tmap.offset.copy( texParams.offset );\r\n\r\n\t\t\tmap.wrapS = scope.wrap;\r\n\t\t\tmap.wrapT = scope.wrap;\r\n\r\n\t\t\tparams[ mapType ] = map;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var prop in mat ) {\r\n\r\n\t\t\tvar value = mat[ prop ];\r\n\t\t\tvar n;\r\n\r\n\t\t\tif ( value === '' ) continue;\r\n\r\n\t\t\tswitch ( prop.toLowerCase() ) {\r\n\r\n\t\t\t\t// Ns is material specular exponent\r\n\r\n\t\t\t\tcase 'kd':\r\n\r\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\r\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_kd':\r\n\r\n\t\t\t\t\t// Diffuse texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"map\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ks':\r\n\r\n\t\t\t\t\t// Specular map\r\n\r\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'norm':\r\n\r\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_bump':\r\n\t\t\t\tcase 'bump':\r\n\r\n\t\t\t\t\t// Bump texture map\r\n\r\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ns':\r\n\r\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\r\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\r\n\r\n\t\t\t\t\tparams.shininess = parseFloat( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tn = parseFloat(value);\r\n\r\n\t\t\t\t\tif ( n < 1 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tr':\r\n\t\t\t\t\tn = parseFloat(value);\r\n\r\n\t\t\t\t\tif ( n > 0 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = 1 - n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t},\r\n\r\n\tgetTextureParams: function ( value, matParams ) {\r\n\r\n\t\tvar texParams = {\r\n\r\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\r\n\t\t\toffset: new THREE.Vector2( 0, 0 )\r\n\r\n\t\t };\r\n\r\n\t\tvar items = value.split( /\\s+/ );\r\n\t\tvar pos;\r\n\r\n\t\tpos = items.indexOf( '-bm' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\r\n\t\t\titems.splice( pos, 2 );\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-s' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-o' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\ttexParams.url = items.join( ' ' ).trim();\r\n\t\treturn texParams;\r\n\r\n\t},\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture;\r\n\t\tvar loader = THREE.Loader.Handlers.get( url );\r\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\r\n\r\n\t\tif ( loader === null ) {\r\n\r\n\t\t\tloader = new THREE.TextureLoader( manager );\r\n\r\n\t\t}\r\n\r\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\r\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\r\n\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};"],"sourceRoot":""}